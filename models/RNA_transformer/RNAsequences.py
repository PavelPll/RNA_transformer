class RNAsequences:
    # External RNA sequences for analysis
    def __init__(self):
        # Predefined dictionary
        self.PTC = [("A",2057), ("A",2058), ("A",2059), ("G",2061), ("A",2062), ("C",2063), ("G",2251), 
                    ("G",2252), ("G",2447), ("A",2450), ("A",2451), ("C",2452), ("A",2453), ("U",2492),
                    ("C",2501), ("U",2506), ("C",2507), ("G",2553), ("C",2556), ("G",2572), ("C",2573),
                    ("U",2584), ("U",2585), ("A",2602), ("C",2611)]
        
        self.PTCred = [("A",2060),("G",2061),
                       ("C",2064),("C",2065),
                       ("A",2071),
                       ("U",2074),("U",2075),
                       ("A",2077),("C",2078),
                       ("A",2082),
                       ("G",2242), ("U",2243), ("U",2244), 
                       ("U",2249), ("G",2250), ("G",2251), ("G",2252),("G",2253),  
                       ("A",2432), 
                       ("A",2435),
                       ("U",2438), ("A",2439), ("C",2440), 
                       ("G",2445), ("G",2446), 
                       ("U",2449),("A",2450), ("A",2451), 
                       ("G",2454), 
                       ("U",2457), 
                       ("U",2460), 
                       ("A",2469), 
                       ("G",2472), 
                       ("C",2475), 
                       ("A",2478), 
                       ("G",2481), 
                       ("U",2492),
                       ("G",2494),
                       ("C",2498),
                       ("G",2505),("U",2506),
                       ("G",2508),("G",2509),
                       ("U",2511),
                       ("A",2518),
                       ("C",2520),
                       ("U",2522),
                       ("G",2529),
                       ("A",2531),
                       ("A",2541),
                       ("G",2543),
                       ("U",2546),
                       ("G",2549),
                       ("U",2552),("G",2553),
                       ("C",2556),
                       ("C",2558),("C",2559),
                       ("A",2565),
                       ("G",2576),("A",2577),("G",2578),
                       ("U",2580),("G",2581),("G",2582),
                       ("U",2584),("U",2585),
                       ("A",2587),
                       ("C",2591),
                       ("C",2594),("G",2595),
                       ("G",2597),("A",2598),("G",2599),
                       ("C",2601),("A",2602),("G",2603),
                       ("G",2608),]
        
        self.PTCorange = [("G",2053), 
                          ("A",2059),
                          ("A",2062),("C",2063),
                          ("U",2068),
                          ("C",2073),
                          ("U",2079),
                          ("G",2083),
                          ("U",2086),
                          ("G",2234), 
                          ("G",2237), ("G",2238), ("G",2239), 
                          ("A",2241), 
                          ("U",2245), ("G",2246), 
                          ("C",2248), 
                          ("C",2254), ("G",2255), ("G",2256), 
                          ("C",2258), #
                          ("U",2423), 
                          ("C",2427), 
                          ("G",2429), 
                          ("A",2433), ("A",2434), 
                          ("G",2436), 
                          ("G",2447), ("A",2448), 
                          ("C",2452), 
                          ("C",2467), 
                          ("G",2470), 
                          ("A",2476), 
                          ("C",2480), 
                          ("G",2482), ("C",2483), 
                          ("U",2493), 
                          ("U",2500), ("C",2501), ("G",2502), ("A",2503), ("U",2504), 
                          ("C",2507), 
                          ("C",2512), 
                          ("U",2514), 
                          ("G",2524), 
                          ("G",2532), 
                          ("C",2539), 
                          ("A",2542), # bolt?
                          ("G",2545), 
                          ("U",2554), ("U",2555), 
                          ("U",2563), ("A",2564), 
                          ("G",2569), ("G",2570), 
                          ("C",2573), ("G",2574), 
                          ("C",2579), 
                          ("G",2583), 
                          ("G",2588), ("A",2589), 
                          ("G",2592), ("U",2593), 
                          ("U",2596), 
                          ("A",2600), 
                          ("U",2605), 
                          ("C",2616), 
                          ]
        

        self.PTCyellow = [("C",2043), 
                          ("A",2054), 
                          ("G",2056), 
                          ("G",2067), 
                          ("G",2069), 
                          ("U",2076), 
                          ("G",2087), 
                          ("G",2230), 
                          ("G",2235), ("C",2236), 
                          ("A",2425), 
                          ("C",2442), ("C",2443), 
                          ("A",2453),
                          ("G",2455),("C",2456),
                          ("C",2463),
                          ("U",2473),
                          ("G",2487),
                          ("G",2490),("U",2491),
                          ("A",2497),
                          ("C",2499),
                          ("C",2510),
                          ("C",2515),
                          ("C",2517),
                          ("U",2519),
                          ("C",2521),
                          ("G",2523),
                          ("G",2526),
                          ("U",2528),
                          ("A",2534),("G",2535),
                          ("C",2540),
                          ("G",2544),#hrenov loop
                          ("G",2550),
                          ("G",2557),
                          ("A",2561),("U",2562),
                          ("A",2566),("G",2567),
                          ("A",2572),
                          ("C",2575),
                          ("G",2607),
                          ("U",2609),
                          ("C",2612),("U",2613),("A",2614),("U",2615),
                          ("C",2617),
                          ("G",2624),("G",2625),
                          
                          ]
        
        self.PTCgreen = [("C",2044), ("C",2045), ("G",2046), 
                         ("G",2049), ("C",2050),
                         ("G",2052), 
                         ("C",2055), 
                         ("A",2058), 
                         ("C",2066), 
                         ("G",2070), 
                         ("G",2072), 
                         ("G",2080), 
                         ("C",2084), ("C",2085), 
                         ("C",2240), 
                         ("A",2247), 
                         ("U",2257), 
                         ("C",2424), #
                         ("A",2426),
                         ("G",2428),
                         ("A",2430),("U",2431),
                         ("C",2441),
                         ("G",2444),
                         ("A",2459),
                         ("C",2461),
                         ("C",2465),("C",2466),
                         ("G",2484),("G",2485),
                         ("G",2489),
                         ("G",2495),("C",2496),
                         ("G",2525),
                         ("C",2527),
                         ("G",2536),("U",2537),("C",2538),
                         ("G",2548),
                         ("C",2551),
                         ("C",2560),
                         ("C",2586),
                         ("A",2590),
                         ("U",2604),
                         ("C",2606),
                         ("C",2610),
                         ("G",2618),("C",2619),
                         ("G",2623),
                          ]
        
        self.SymR_Asite = [("G",2502),("A",2503),("U",2504),("G",2505),("U",2506),("C",2507),("G",2508),("G",2509), ("C",2510),
        ("U",2511),("C",2512),("G",2513),("U",2514),("C",2515),("G",2516),("C",2517),("A",2518),("U",2519),("C",2520),("C",2521),("U",2522),
        ("G",2543),("G",2544),("G",2545),("U",2546),("U",2547),("G",2548),("G",2549),("G",2550),
        ("C",2551),("U",2552),("G",2553),("U",2554),("U",2555),("C",2556),("G",2557),("C",2558),("C",2559),("C",2560),
        ("A",2561),("U",2562),("U",2563),("A",2564),("A",2565),("A",2566),("G",2567),("C",2568),("G",2569),("G",2570),
        ("C",2571),("A",2572),("C",2573),("G",2574),("C",2575),("G",2576),("A",2577),("G",2578),("C",2579),("U",2580),
        ("G",2581),("G",2582),("G",2583),("U",2584),("U",2585),("C",2586),("A",2587),("G",2588),("A",2589),("A",2590),
        ("C",2591),("G",2592),("U",2593),("C",2594),("G",2595),("U",2596),("G",2597),("A",2598),("G",2599),("A",2600),
        ("C",2601),("A",2602),("G",2603),("U",2604),("U",2605),("C",2606),("G",2607),("G",2608),("U",2609),("C",2610)]

        self.SymR_Psite = [("A",2058),("A",2059),("A",2060),
        ("G",2061),("A",2062),("C",2063),("C",2064),("C",2065),("C",2066),("G",2067),("U",2068),("G",2069),("G",2070),
        ("A",2071),("G",2072),("C",2073),("U",2074),("U",2075),("U",2076),("A",2077),("C",2078),("U",2079),
        ("A",2241),("G",2242),("U",2243),("U",2244),("U",2245),("G",2246),("A",2247),("C",2248),("U",2249),("G",2250),
        ("G",2251),("G",2252),("G",2253),("C",2254),("G",2255),("G",2256),("U",2257),("C",2258),("A",2430),
        ("U",2431),("A",2432),("A",2433),("A",2434),("A",2435),("G",2436),("U",2437),("U",2438),("A",2439),("C",2440),
        ("C",2441),("C",2442),("C",2443),("G",2444),("G",2445),("G",2446),("G",2447),("A",2448),("U",2449),("A",2450),
        ("A",2451),("C",2452),("A",2453),("G",2454),("G",2455),("C",2456),("U",2457),("G",2458),("A",2459),("U",2460),
        ("C",2461),("U",2462),("C",2463),
        ("G",2487),("A",2488),("G",2489),("G",2490),
        ("U",2491),("U",2492),("U",2493),("G",2494),("G",2495),("C",2496),("A",2497),("C",2498),("C",2499),("U",2500),
        ("C",2501)]


    def list2seq(self, sequence):
        # Convert list of tuples to RNA sedquence
        # Extract positions and nucleotides
        positions = [pos for _, pos in sequence]
        min_pos, max_pos = min(positions), max(positions)
        # Create a mapping dictionary
        pos_to_nucleotide = {pos: nuc for nuc, pos in sequence}
        # Generate the sequence with missing positions filled as 'N'
        rna_sequence = "".join(pos_to_nucleotide.get(pos, "N") for pos in range(min_pos, max_pos + 1))
        return rna_sequence
    
    def check_dulicates(self, list):
        # Check for duplicates
        numbers = [num for _, num in list]
        duplicates = [num for num in numbers if numbers.count(num) > 1]
        if len(duplicates)>0:
            print("Problem with sequence, see", set(duplicates))
            return True
        else:
            return False
        

    # Method to get the original dictionary (rna_types)
    def get_PTCsequence(self):
        return self.list2seq(self.PTC)
    
    def get_SymR_Psequence(self):
        return self.list2seq(self.SymR_Psite)
    
    def get_SymR_Asequence(self):
        return self.list2seq(self.SymR_Asite)
    

    def get_PTC2sequence(self):
        combined_list = self.PTCred
        combined_list.sort(key=lambda x: x[1])
        assert self.check_dulicates(combined_list)==0
        return self.list2seq(combined_list)
        # return combined_list
    
    def get_PTC3sequence(self):
        combined_list = self.PTCred + self.PTCorange
        combined_list.sort(key=lambda x: x[1])
        assert self.check_dulicates(combined_list)==0
        return self.list2seq(combined_list)
        # return combined_list
    
    def get_PTC4sequence(self):
        combined_list = self.PTCred + self.PTCorange + self.PTCyellow
        combined_list.sort(key=lambda x: x[1])
        assert self.check_dulicates(combined_list)==0
        return self.list2seq(combined_list)
        # return combined_list
    
    def get_PTC5sequence(self):
        combined_list = self.PTCred + self.PTCorange + self.PTCyellow + self.PTCgreen
        combined_list.sort(key=lambda x: x[1])
        assert self.check_dulicates(combined_list)==0
        return self.list2seq(combined_list)
        # return combined_list
    


